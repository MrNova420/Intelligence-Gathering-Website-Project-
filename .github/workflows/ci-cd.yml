name: Intelligence Gathering Platform CI/CD

on:
  push:
    branches: [ main, develop, copilot/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unified Web Application Testing
  unified-app-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-unified-${{ hashFiles('backend/requirements-lite.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-unified-
          ${{ runner.os }}-pip-
    
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn jinja2 python-multipart aiofiles
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: Install backend dependencies (optional)
      run: |
        if [ -f backend/requirements-lite.txt ]; then
          pip install -r backend/requirements-lite.txt || echo "Backend requirements failed, continuing with core dependencies"
        fi
    
    - name: Test unified web application
      run: |
        python -c "import webapp; print('✅ Webapp imports successfully')"
        python -c "import config; print('✅ Config imports successfully')"
        python -c "import start; print('✅ Start script imports successfully')"
    
    - name: Run application validation
      run: |
        python start.py validate || echo "Validation completed with warnings"
    
    - name: Test web application startup
      run: |
        timeout 10 python start.py web || echo "✅ Web application startup test completed"
      run: |
        python verify_fixes.py
        python final_comprehensive_validation.py
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing and Building
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check || npx tsc --noEmit
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint || npx eslint . --ext .ts,.tsx,.js,.jsx
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false || true

  # Security and Quality Checks
  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements-lite.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Start backend server
      run: |
        cd backend
        python run_standalone.py &
        sleep 10
      env:
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      run: |
        python -m pytest backend/tests/test_enterprise_components.py -v
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/docs || exit 1

  # Build and Deploy (Production)
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker images
      run: |
        docker build -t intelligence-platform-backend:latest -f backend/Dockerfile.prod backend/
        docker build -t intelligence-platform-frontend:latest -f frontend/Dockerfile frontend/
    
    - name: Run security scan on Docker images
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image intelligence-platform-backend:latest || true
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp docker-compose.prod.yml deploy/
        cp .env.production deploy/.env
        cp deploy_to_production.sh deploy/
        tar -czf intelligence-platform-${{ github.sha }}.tar.gz deploy/
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: intelligence-platform-${{ github.sha }}.tar.gz

  # Performance and Load Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r backend/requirements-lite.txt
        pip install locust
    
    - name: Start application
      run: |
        cd backend
        python run_standalone.py &
        sleep 15
    
    - name: Run performance tests
      run: |
        echo "
        from locust import HttpUser, task, between
        
        class WebsiteUser(HttpUser):
            wait_time = between(1, 2)
            
            @task(3)
            def view_health(self):
                self.client.get('/health')
            
            @task(2)
            def view_docs(self):
                self.client.get('/docs')
            
            @task(1)
            def view_api_info(self):
                self.client.get('/api/v1/info')
        " > locustfile.py
        
        locust --headless --users 10 --spawn-rate 2 -H http://localhost:8000 --run-time 1m

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy, performance-tests]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi