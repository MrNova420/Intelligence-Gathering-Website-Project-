version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: intelligence_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl:/etc/ssl/certs:ro
      - static_files:/var/www/static:ro
    depends_on:
      - backend
      - frontend
    restart: always
    networks:
      - intelligence_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: intelligence_backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENVIRONMENT=production
    volumes:
      - logs:/app/logs
      - uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    restart: always
    networks:
      - intelligence_network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: intelligence_frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    volumes:
      - static_files:/app/.next/static
    restart: always
    networks:
      - intelligence_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  postgres:
    image: postgres:15-alpine
    container_name: intelligence_postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: always
    networks:
      - intelligence_network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  redis:
    image: redis:7-alpine
    container_name: intelligence_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - intelligence_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  monitoring:
    image: prom/prometheus:latest
    container_name: intelligence_monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: always
    networks:
      - intelligence_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  static_files:
  logs:
  uploads:

networks:
  intelligence_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
