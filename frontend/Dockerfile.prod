# Production Frontend Dockerfile with security hardening
FROM node:18-alpine as builder

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Labels for metadata
LABEL maintainer="Intelligence Platform Team" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="Intelligence Gathering Platform Frontend" \
      org.label-schema.description="Production-ready intelligence gathering dashboard" \
      org.label-schema.url="https://github.com/MrNova420/Intelligence-Gathering-Website-Project-" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/MrNova420/Intelligence-Gathering-Website-Project-" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with security enhancements
RUN npm ci --only=production --no-audit --ignore-scripts \
    && npm cache clean --force

# Copy application code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine as production

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    tini \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Security hardening
RUN find /app -type f -exec chmod 644 {} \; \
    && find /app -type d -exec chmod 755 {} \; \
    && chmod -R o-rwx /app

# Switch to non-root user
USER nextjs

# Set environment variables
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Expose port
EXPOSE 3000

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Run the application
CMD ["node", "server.js"]