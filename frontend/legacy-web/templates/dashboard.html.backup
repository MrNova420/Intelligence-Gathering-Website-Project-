{% extends "base.html" %}
{% block title %}Dashboard - Intelligence Platform{% endblock %}

{% block content %}
<!-- Modern Status Bar with Animation -->
<div class="alert alert-success alert-dismissible fade show animate-slide-up" role="alert" style="background: rgba(16, 185, 129, 0.1); border: 1px solid rgba(16, 185, 129, 0.3); border-left: 4px solid rgb(16, 185, 129);">
    <div class="d-flex align-items-center">
        <div style="width: 8px; height: 8px; border-radius: 50%; background: rgb(16, 185, 129); box-shadow: 0 0 8px rgba(16, 185, 129, 0.5); margin-right: 12px;"></div>
        <strong>System Status:</strong> All systems operational | 
        <span id="uptime" data-metric="true">Uptime: 99.9%</span> | 
        <span id="current-time" data-current-time="true"></span>
    </div>
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>

<div class="row mb-4 animate-slide-right">
    <div class="col-md-6">
        <h1 class="d-flex align-items-center mb-0 text-gradient">
            <i class="fas fa-tachometer-alt me-3" style="color: var(--blue-500);"></i>
            Intelligence Dashboard
        </h1>
        <small class="text-muted">Real-time monitoring and analytics</small>
    </div>
    <div class="col-md-6 text-end">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-primary btn-sm hover-lift" onclick="refreshDashboard()" data-tooltip="Refresh all dashboard data">
                <i class="fas fa-sync-alt me-1"></i>Refresh
            </button>
            <button type="button" class="btn btn-outline-success btn-sm hover-lift" onclick="startQuickScan()" data-tooltip="Start a quick intelligence scan">
                <i class="fas fa-bolt me-1"></i>Quick Scan
            </button>
        </div>
    </div>
</div>

<!-- Enhanced Metrics Cards with Animations -->
<div class="row mb-4">
    <div class="col-xl-3 col-md-6 mb-3">
        <div class="card hover-lift animate-fade-scale" style="animation-delay: 0.1s;">
            <div class="card-body d-flex align-items-center">
                <div class="bg-success bg-opacity-10 rounded-3 p-3 me-3 glow-blue">
                    <i class="fas fa-heartbeat fa-2x text-success float"></i>
                </div>
                <div>
                    <h6 class="text-muted mb-1">System Health</h6>
                    <h3 class="mb-0 text-success">{{ system_status.status.title() }}</h3>
                    <small class="text-muted">
                        <i class="fas fa-arrow-up text-success me-1"></i>
                        99.9% uptime
                    </small>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-xl-3 col-md-6 mb-3">
        <div class="card hover-lift animate-fade-scale" style="animation-delay: 0.2s;">
            <div class="card-body d-flex align-items-center">
                <div class="bg-info bg-opacity-10 rounded-3 p-3 me-3 glow-purple">
                    <i class="fas fa-cogs fa-2x text-info float"></i>
                </div>
                <div>
                    <h6 class="text-muted mb-1">Active Scanners</h6>
                    <h3 class="mb-0" data-metric="true">{{ system_status.scanner_count }}</h3>
                    <small class="text-muted">modules available</small>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-xl-3 col-md-6 mb-3">
        <div class="card hover-lift animate-fade-scale" style="animation-delay: 0.3s;">
            <div class="card-body d-flex align-items-center">
                <div class="bg-warning bg-opacity-10 rounded-3 p-3 me-3 glow-cyan">
                    <i class="fas fa-search fa-2x text-warning float"></i>
                </div>
                <div>
                    <h6 class="text-muted mb-1">Total Scans</h6>
                    <h3 class="mb-0" id="total-scans" data-metric="true">{{ stats.total_scans }}</h3>
                    <small class="text-muted">
                        <i class="fas fa-plus text-success me-1"></i>
                        +15 today
                    </small>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-xl-3 col-md-6 mb-3">
        <div class="card hover-lift animate-fade-scale" style="animation-delay: 0.4s;">
            <div class="card-body d-flex align-items-center">
                <div class="bg-primary bg-opacity-10 rounded-3 p-3 me-3 hover-glow">
                    <i class="fas fa-chart-line fa-2x text-primary float"></i>
                </div>
                <div>
                    <h6 class="text-muted mb-1">Success Rate</h6>
                    <h3 class="mb-0 text-gradient-success">{{ stats.success_rate }}%</h3>
                    <div class="progress" style="height: 6px; border-radius: 3px; background: rgba(148, 163, 184, 0.1);">
                        <div class="progress-bar" style="background: var(--gradient-success); width: {{ stats.success_rate }}%; transition: width 1s ease-in-out;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Analytics and Quick Actions Row with Modern Design -->
<div class="row mb-4">
    <!-- Performance Chart with Enhanced Styling -->
    <div class="col-lg-8 mb-4">
        <div class="card hover-lift animate-slide-up" style="animation-delay: 0.5s;">
            <div class="card-header bg-transparent border-0 d-flex justify-content-between align-items-center">
                <h5 class="mb-0 text-gradient">
                    <i class="fas fa-chart-area me-2"></i>Scan Performance
                </h5>
                <div class="btn-group btn-group-sm" role="group">
                    <input type="radio" class="btn-check" name="chartPeriod" id="chart24h" checked>
                    <label class="btn btn-outline-primary hover-lift" for="chart24h">24h</label>
                    <input type="radio" class="btn-check" name="chartPeriod" id="chart7d">
                    <label class="btn btn-outline-primary hover-lift" for="chart7d">7d</label>
                    <input type="radio" class="btn-check" name="chartPeriod" id="chart30d">
                    <label class="btn btn-outline-primary hover-lift" for="chart30d">30d</label>
                </div>
            </div>
            <div class="card-body">
                <div class="chart-container" style="height: 300px;" data-chart="performance">
                    <canvas id="performanceChart"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Enhanced Quick Actions -->
    <div class="col-lg-4 mb-4">
        <div class="card hover-lift animate-slide-up h-100" style="animation-delay: 0.6s;">
            <div class="card-header bg-transparent border-0">
                <h5 class="mb-0 text-gradient">
                    <i class="fas fa-bolt me-2"></i>Quick Actions
                </h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-3">
                    <a href="/scan?type=email" class="btn btn-outline-primary btn-lg hover-lift" data-tooltip="Investigate email addresses and domains">
                        <i class="fas fa-envelope me-2"></i>Email Investigation
                    </a>
                    <a href="/scan?type=phone" class="btn btn-outline-success btn-lg hover-lift" data-tooltip="Lookup phone numbers and carriers">
                        <i class="fas fa-phone me-2"></i>Phone Lookup
                    </a>
                    <a href="/scan?type=domain" class="btn btn-outline-info btn-lg hover-lift" data-tooltip="Analyze domains and subdomains">
                        <i class="fas fa-globe me-2"></i>Domain Analysis
                    </a>
                    <a href="/scan?type=social" class="btn btn-outline-warning btn-lg hover-lift" data-tooltip="Search social media profiles">
                        <i class="fas fa-users me-2"></i>Social Media
                    </a>
                </div>
                
                <hr style="border-color: rgba(148, 163, 184, 0.1);">
                
                <div class="text-center">
                    <small class="text-muted fw-semibold">Advanced Tools</small>
                    <div class="mt-2">
                        <a href="/batch-scan" class="btn btn-sm btn-outline-secondary me-2 hover-lift" data-tooltip="Process multiple targets at once">
                            <i class="fas fa-layer-group me-1"></i>Batch Scan
                        </a>
                        <a href="/api/v1/scan" class="btn btn-sm btn-outline-secondary hover-lift" data-tooltip="Access REST API documentation">
                            <i class="fas fa-code me-1"></i>API
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Activity and Scan Types with Modern Design -->
<div class="row">
    <!-- Enhanced Recent Scans -->
    <div class="col-lg-8 mb-4">
        <div class="card hover-lift animate-slide-up" style="animation-delay: 0.7s;">
            <div class="card-header bg-transparent border-0 d-flex justify-content-between align-items-center">
                <h5 class="mb-0 text-gradient">
                    <i class="fas fa-history me-2"></i>Recent Activity
                </h5>
                <a href="/reports" class="btn btn-sm btn-outline-primary hover-lift" data-tooltip="View detailed reports">
                    <i class="fas fa-external-link-alt me-1"></i>View All
                </a>
            </div>
            <div class="card-body p-0">
                {% if recent_scans %}
                <div class="table-responsive custom-scrollbar">
                    <table class="table table-hover mb-0">
                        <thead style="background: rgba(148, 163, 184, 0.05);">
                            <tr>
                                <th class="border-0 fw-semibold">Type</th>
                                <th class="border-0 fw-semibold">Target</th>
                                <th class="border-0 fw-semibold">Status</th>
                                <th class="border-0 fw-semibold">Duration</th>
                                <th class="border-0 fw-semibold">Results</th>
                                <th class="border-0 fw-semibold">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for scan in recent_scans %}
                            <tr class="hover-lift" style="transition: all 0.2s ease;">
                                <td>
                                    <span class="badge rounded-pill" style="background: var(--gradient-primary); color: white;">
                                        <i class="fas fa-envelope me-1"></i>{{ scan.type }}
                                    </span>
                                </td>
                                <td class="font-monospace text-info">{{ scan.target }}</td>
                                <td>
                                    {% if scan.status == 'completed' %}
                                        <span class="badge rounded-pill" style="background: var(--gradient-success); color: white;">
                                            <i class="fas fa-check me-1"></i>Completed
                                        </span>
                                    {% elif scan.status == 'running' %}
                                        <span class="badge rounded-pill" style="background: rgba(245, 158, 11, 0.2); color: var(--amber-500); border: 1px solid var(--amber-500);">
                                            <i class="fas fa-spinner fa-spin me-1"></i>Running
                                        </span>
                                    {% else %}
                                        <span class="badge rounded-pill" style="background: var(--gradient-danger); color: white;">
                                            <i class="fas fa-exclamation me-1"></i>Failed
                                        </span>
                                    {% endif %}
                                </td>
                                <td class="text-muted">2.3s</td>
                                <td><span class="badge" style="background: var(--gradient-accent); color: white;">15 items</span></td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a href="/scan/{{ scan.id }}" class="btn btn-outline-primary hover-lift" data-tooltip="View scan details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <button class="btn btn-outline-secondary hover-lift" onclick="downloadReport('{{ scan.id }}')" data-tooltip="Download report">
                                            <i class="fas fa-download"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
                {% else %}
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="fas fa-search fa-3x text-muted float" style="opacity: 0.6;"></i>
                    </div>
                    <h6 class="text-muted">No recent scans</h6>
                    <p class="text-muted mb-4">Start your first intelligence gathering scan</p>
                    <a href="/scan" class="btn btn-primary hover-lift" style="background: var(--gradient-primary); border: none;">
                        <i class="fas fa-plus me-2"></i>Start First Scan
                    </a>
                </div>
                {% endif %}
            </div>
        </div>
    </div>
    
    <!-- Enhanced Scan Types Distribution -->
    <div class="col-lg-4 mb-4">
        <div class="card hover-lift animate-slide-up h-100" style="animation-delay: 0.8s;">
            <div class="card-header bg-transparent border-0">
                <h5 class="mb-0 text-gradient">
                    <i class="fas fa-chart-pie me-2"></i>Scan Distribution
                </h5>
            </div>
            <div class="card-body">
                <div class="chart-container mb-4" style="height: 200px;" data-chart="distribution">
                    <canvas id="scanTypesChart" style="max-height: 200px;"></canvas>
                </div>
                
                <div class="distribution-stats">
                    <div class="d-flex justify-content-between align-items-center mb-3 p-2 rounded hover-lift" style="background: rgba(59, 130, 246, 0.1); transition: all 0.3s ease;">
                        <div class="d-flex align-items-center">
                            <div style="width: 12px; height: 12px; border-radius: 50%; background: var(--blue-500); margin-right: 8px;"></div>
                            <span class="text-muted">Email</span>
                        </div>
                        <strong class="text-blue-400">45%</strong>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center mb-3 p-2 rounded hover-lift" style="background: rgba(16, 185, 129, 0.1); transition: all 0.3s ease;">
                        <div class="d-flex align-items-center">
                            <div style="width: 12px; height: 12px; border-radius: 50%; background: var(--green-500); margin-right: 8px;"></div>
                            <span class="text-muted">Phone</span>
                        </div>
                        <strong class="text-green-400">30%</strong>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center mb-3 p-2 rounded hover-lift" style="background: rgba(139, 92, 246, 0.1); transition: all 0.3s ease;">
                        <div class="d-flex align-items-center">
                            <div style="width: 12px; height: 12px; border-radius: 50%; background: var(--purple-500); margin-right: 8px;"></div>
                            <span class="text-muted">Social</span>
                        </div>
                        <strong class="text-purple-400">15%</strong>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center p-2 rounded hover-lift" style="background: rgba(6, 182, 212, 0.1); transition: all 0.3s ease;">
                        <div class="d-flex align-items-center">
                            <div style="width: 12px; height: 12px; border-radius: 50%; background: var(--cyan-500); margin-right: 8px;"></div>
                            <span class="text-muted">Domain</span>
                        </div>
                        <strong class="text-cyan-400">10%</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Modern Charts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
// Enhanced Performance Chart with Modern Styling
const ctx = document.getElementById('performanceChart').getContext('2d');
const performanceChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: ['00:00', '04:00', '08:00', '12:00', '16:00', '20:00', '24:00'],
        datasets: [{
            label: 'Successful Scans',
            data: [12, 19, 15, 25, 35, 28, 32],
            borderColor: 'rgb(59, 130, 246)',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            borderWidth: 3,
            tension: 0.4,
            fill: true,
            pointBackgroundColor: 'rgb(59, 130, 246)',
            pointBorderColor: '#ffffff',
            pointBorderWidth: 2,
            pointRadius: 6,
            pointHoverRadius: 8,
        }, {
            label: 'Failed Scans',
            data: [1, 2, 1, 3, 2, 1, 2],
            borderColor: 'rgb(239, 68, 68)',
            backgroundColor: 'rgba(239, 68, 68, 0.1)',
            borderWidth: 3,
            tension: 0.4,
            fill: true,
            pointBackgroundColor: 'rgb(239, 68, 68)',
            pointBorderColor: '#ffffff',
            pointBorderWidth: 2,
            pointRadius: 6,
            pointHoverRadius: 8,
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: {
            duration: 2000,
            easing: 'easeInOutQuart'
        },
        plugins: {
            legend: {
                position: 'top',
                labels: {
                    color: 'rgb(148, 163, 184)',
                    font: {
                        family: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif',
                        size: 12,
                        weight: '500'
                    },
                    usePointStyle: true,
                    pointStyle: 'circle'
                }
            }
        },
        scales: {
            x: {
                grid: {
                    color: 'rgba(148, 163, 184, 0.1)',
                    borderColor: 'rgba(148, 163, 184, 0.2)'
                },
                ticks: {
                    color: 'rgb(148, 163, 184)',
                    font: {
                        family: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif',
                        size: 11
                    }
                }
            },
            y: {
                beginAtZero: true,
                grid: {
                    color: 'rgba(148, 163, 184, 0.1)',
                    borderColor: 'rgba(148, 163, 184, 0.2)'
                },
                ticks: {
                    color: 'rgb(148, 163, 184)',
                    font: {
                        family: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif',
                        size: 11
                    }
                }
            }
        },
        elements: {
            point: {
                hoverBackgroundColor: '#ffffff'
            }
        }
    }
});

// Enhanced Scan Types Doughnut Chart
const pieCtx = document.getElementById('scanTypesChart').getContext('2d');
const scanTypesChart = new Chart(pieCtx, {
    type: 'doughnut',
    data: {
        labels: ['Email', 'Phone', 'Social', 'Domain'],
        datasets: [{
            data: [45, 30, 15, 10],
            backgroundColor: [
                'rgb(59, 130, 246)',
                'rgb(16, 185, 129)', 
                'rgb(139, 92, 246)',
                'rgb(6, 182, 212)'
            ],
            borderWidth: 0,
            hoverBorderWidth: 3,
            hoverBorderColor: '#ffffff'
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: true,
        cutout: '70%',
        animation: {
            animateRotate: true,
            duration: 2000,
            easing: 'easeInOutQuart'
        },
        plugins: {
            legend: {
                display: false
            },
            tooltip: {
                backgroundColor: 'rgba(15, 23, 42, 0.95)',
                titleColor: 'rgb(248, 250, 252)',
                bodyColor: 'rgb(203, 213, 225)',
                borderColor: 'rgba(148, 163, 184, 0.2)',
                borderWidth: 1,
                cornerRadius: 8,
                displayColors: true,
                titleFont: {
                    family: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif',
                    size: 14,
                    weight: '600'
                },
                bodyFont: {
                    family: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif',
                    size: 12
                }
            }
        }
    }
});

// Modern Real-time Updates with Enhanced Animations
async function updateMetrics() {
    try {
        const response = await fetch('/api/v1/dashboard/metrics');
        const data = await response.json();
        
        if (data.success && data.metrics) {
            // Animate counter updates
            const totalScans = document.getElementById('total-scans');
            if (totalScans && data.metrics.scans) {
                animateCounter(totalScans, parseInt(totalScans.textContent), data.metrics.scans.current_value);
            }
            
            updateMetricCards(data.metrics);
        }
    } catch (error) {
        console.error('Error updating metrics:', error);
        // Simulate updates for demo
        simulateMetricUpdates();
    }
}

function animateCounter(element, start, end, duration = 1000) {
    const startTime = performance.now();
    const difference = end - start;

    const animate = (currentTime) => {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Easing function for smooth animation
        const easeOutCubic = 1 - Math.pow(1 - progress, 3);
        const currentValue = Math.floor(start + (difference * easeOutCubic));
        
        element.textContent = currentValue.toLocaleString();
        
        // Add visual feedback during update
        element.style.color = 'var(--blue-400)';
        element.style.transform = 'scale(1.05)';
        
        if (progress < 1) {
            requestAnimationFrame(animate);
        } else {
            // Reset styling after animation
            setTimeout(() => {
                element.style.color = '';
                element.style.transform = '';
            }, 200);
        }
    };

    requestAnimationFrame(animate);
}

function simulateMetricUpdates() {
    // Simulate real-time metric updates for demo
    const metricElements = document.querySelectorAll('[data-metric="true"]');
    metricElements.forEach(element => {
        const currentValue = parseInt(element.textContent) || 0;
        const variation = Math.floor(Math.random() * 5) + 1;
        const newValue = currentValue + variation;
        
        animateCounter(element, currentValue, newValue);
    });
}

// Enhanced chart updates with smooth transitions
async function updateCharts() {
    try {
        // Simulate new chart data
        const newLabels = generateTimeLabels();
        const newSuccessData = generateRandomData(7, 10, 40);
        const newFailureData = generateRandomData(7, 0, 5);
        
        // Update performance chart with animation
        performanceChart.data.labels = newLabels;
        performanceChart.data.datasets[0].data = newSuccessData;
        performanceChart.data.datasets[1].data = newFailureData;
        performanceChart.update('active');
        
        // Update distribution chart
        const newDistributionData = [
            45 + Math.floor(Math.random() * 10) - 5,
            30 + Math.floor(Math.random() * 10) - 5,
            15 + Math.floor(Math.random() * 6) - 3,
            10 + Math.floor(Math.random() * 6) - 3
        ];
        
        scanTypesChart.data.datasets[0].data = newDistributionData;
        scanTypesChart.update('active');
        
    } catch (error) {
        console.error('Error updating charts:', error);
    }
}

function generateTimeLabels() {
    const labels = [];
    const now = new Date();
    for (let i = 6; i >= 0; i--) {
        const time = new Date(now.getTime() - (i * 4 * 60 * 60 * 1000));
        labels.push(time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }));
    }
    return labels;
}

function generateRandomData(length, min, max) {
    return Array.from({ length }, () => Math.floor(Math.random() * (max - min + 1)) + min);
}

// Enhanced notification system
function showModernNotification(message, type = 'info', duration = 4000) {
    if (window.modernPlatform && window.modernPlatform.notifications) {
        window.modernPlatform.notifications.show(message, type, duration);
    }
}

// Enhanced dashboard functions with modern animations
window.refreshDashboard = async function() {
    const btn = event.target.closest('button');
    const originalContent = btn.innerHTML;
    
    btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status"></span>Refreshing...';
    btn.disabled = true;
    
    showModernNotification('Refreshing dashboard data...', 'info', 2000);
    
    try {
        await Promise.all([updateMetrics(), updateCharts()]);
        showModernNotification('Dashboard updated successfully!', 'success', 3000);
    } catch (error) {
        showModernNotification('Failed to refresh dashboard', 'error', 4000);
    } finally {
        setTimeout(() => {
            btn.innerHTML = originalContent;
            btn.disabled = false;
        }, 1000);
    }
};

window.startQuickScan = function() {
    showModernNotification('Starting quick scan...', 'info', 2000);
    setTimeout(() => {
        window.location.href = '/scan';
    }, 500);
};

window.downloadReport = function(scanId) {
    showModernNotification(`Preparing report for scan ${scanId}...`, 'info', 3000);
    // Simulate download
    setTimeout(() => {
        showModernNotification('Report download started', 'success', 2000);
    }, 1500);
};

// Initialize modern dashboard features
document.addEventListener('DOMContentLoaded', function() {
    // Initial data load
    updateMetrics();
    
    // Set up periodic updates
    setInterval(() => {
        updateMetrics();
        updateCharts();
    }, 30000); // Update every 30 seconds
    
    // Add keyboard shortcuts for dashboard
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey || e.metaKey) {
            switch(e.key) {
                case 'r':
                    e.preventDefault();
                    refreshDashboard();
                    break;
                case 'n':
                    e.preventDefault();
                    startQuickScan();
                    break;
            }
        }
    });
    
    // Enhanced tooltips initialization
    const tooltipElements = document.querySelectorAll('[data-tooltip]');
    tooltipElements.forEach(element => {
        element.addEventListener('mouseenter', function(e) {
            const tooltip = e.target.dataset.tooltip;
            if (tooltip && window.modernPlatform) {
                // Modern tooltip will be handled by the ModernUIManager
            }
        });
    });
    
    // Real-time clock with enhanced styling
    function updateEnhancedTime() {
        const timeElement = document.querySelector('[data-current-time="true"]');
        if (timeElement) {
            const now = new Date();
            const timeString = now.toLocaleTimeString();
            timeElement.textContent = `Current time: ${timeString}`;
        }
    }
    
    setInterval(updateEnhancedTime, 1000);
    updateEnhancedTime();
    
    // Initialize success notification
    showModernNotification('Dashboard loaded successfully!', 'success', 3000);
});
</script>
{% endblock %}